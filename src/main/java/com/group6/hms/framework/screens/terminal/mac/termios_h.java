package com.group6.hms.framework.screens.terminal.mac;// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class termios_h {

    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;

    private static class tcgetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcgetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static int tcgetattr(int x0, MemorySegment x1) {
        var mh$ = tcgetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetattr", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcsetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static int tcsetattr(int x0, int x1, MemorySegment x2) {
        var mh$ = tcsetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsetattr", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }


    private static class cfmakeraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfmakeraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * {@snippet lang=c :
     * void cfmakeraw(struct termios *)
     * }
     */
    public static void cfmakeraw(MemorySegment x0) {
        var mh$ = cfmakeraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfmakeraw", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }


}

