package com.group6.hms.framework.screens.terminal.mac;// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.util.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;

public class termios_h {

    termios_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final OfInt C_INT = ValueLayout.JAVA_INT;
    public static final OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(Long.MAX_VALUE, JAVA_BYTE));
    public static final OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int __has_safe_buffers = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 0
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int VEOF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define VEOF 0
     * }
     */
    public static int VEOF() {
        return VEOF;
    }
    private static final int VEOL = (int)1L;
    /**
     * {@snippet lang=c :
     * #define VEOL 1
     * }
     */
    public static int VEOL() {
        return VEOL;
    }
    private static final int VEOL2 = (int)2L;
    /**
     * {@snippet lang=c :
     * #define VEOL2 2
     * }
     */
    public static int VEOL2() {
        return VEOL2;
    }
    private static final int VERASE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define VERASE 3
     * }
     */
    public static int VERASE() {
        return VERASE;
    }
    private static final int VWERASE = (int)4L;
    /**
     * {@snippet lang=c :
     * #define VWERASE 4
     * }
     */
    public static int VWERASE() {
        return VWERASE;
    }
    private static final int VKILL = (int)5L;
    /**
     * {@snippet lang=c :
     * #define VKILL 5
     * }
     */
    public static int VKILL() {
        return VKILL;
    }
    private static final int VREPRINT = (int)6L;
    /**
     * {@snippet lang=c :
     * #define VREPRINT 6
     * }
     */
    public static int VREPRINT() {
        return VREPRINT;
    }
    private static final int VINTR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define VINTR 8
     * }
     */
    public static int VINTR() {
        return VINTR;
    }
    private static final int VQUIT = (int)9L;
    /**
     * {@snippet lang=c :
     * #define VQUIT 9
     * }
     */
    public static int VQUIT() {
        return VQUIT;
    }
    private static final int VSUSP = (int)10L;
    /**
     * {@snippet lang=c :
     * #define VSUSP 10
     * }
     */
    public static int VSUSP() {
        return VSUSP;
    }
    private static final int VDSUSP = (int)11L;
    /**
     * {@snippet lang=c :
     * #define VDSUSP 11
     * }
     */
    public static int VDSUSP() {
        return VDSUSP;
    }
    private static final int VSTART = (int)12L;
    /**
     * {@snippet lang=c :
     * #define VSTART 12
     * }
     */
    public static int VSTART() {
        return VSTART;
    }
    private static final int VSTOP = (int)13L;
    /**
     * {@snippet lang=c :
     * #define VSTOP 13
     * }
     */
    public static int VSTOP() {
        return VSTOP;
    }
    private static final int VLNEXT = (int)14L;
    /**
     * {@snippet lang=c :
     * #define VLNEXT 14
     * }
     */
    public static int VLNEXT() {
        return VLNEXT;
    }
    private static final int VDISCARD = (int)15L;
    /**
     * {@snippet lang=c :
     * #define VDISCARD 15
     * }
     */
    public static int VDISCARD() {
        return VDISCARD;
    }
    private static final int VMIN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define VMIN 16
     * }
     */
    public static int VMIN() {
        return VMIN;
    }
    private static final int VTIME = (int)17L;
    /**
     * {@snippet lang=c :
     * #define VTIME 17
     * }
     */
    public static int VTIME() {
        return VTIME;
    }
    private static final int VSTATUS = (int)18L;
    /**
     * {@snippet lang=c :
     * #define VSTATUS 18
     * }
     */
    public static int VSTATUS() {
        return VSTATUS;
    }
    private static final int NCCS = (int)20L;
    /**
     * {@snippet lang=c :
     * #define NCCS 20
     * }
     */
    public static int NCCS() {
        return NCCS;
    }
    private static final int IGNBRK = (int)1L;
    /**
     * {@snippet lang=c :
     * #define IGNBRK 1
     * }
     */
    public static int IGNBRK() {
        return IGNBRK;
    }
    private static final int BRKINT = (int)2L;
    /**
     * {@snippet lang=c :
     * #define BRKINT 2
     * }
     */
    public static int BRKINT() {
        return BRKINT;
    }
    private static final int IGNPAR = (int)4L;
    /**
     * {@snippet lang=c :
     * #define IGNPAR 4
     * }
     */
    public static int IGNPAR() {
        return IGNPAR;
    }
    private static final int PARMRK = (int)8L;
    /**
     * {@snippet lang=c :
     * #define PARMRK 8
     * }
     */
    public static int PARMRK() {
        return PARMRK;
    }
    private static final int INPCK = (int)16L;
    /**
     * {@snippet lang=c :
     * #define INPCK 16
     * }
     */
    public static int INPCK() {
        return INPCK;
    }
    private static final int ISTRIP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ISTRIP 32
     * }
     */
    public static int ISTRIP() {
        return ISTRIP;
    }
    private static final int INLCR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define INLCR 64
     * }
     */
    public static int INLCR() {
        return INLCR;
    }
    private static final int IGNCR = (int)128L;
    /**
     * {@snippet lang=c :
     * #define IGNCR 128
     * }
     */
    public static int IGNCR() {
        return IGNCR;
    }
    private static final int ICRNL = (int)256L;
    /**
     * {@snippet lang=c :
     * #define ICRNL 256
     * }
     */
    public static int ICRNL() {
        return ICRNL;
    }
    private static final int IXON = (int)512L;
    /**
     * {@snippet lang=c :
     * #define IXON 512
     * }
     */
    public static int IXON() {
        return IXON;
    }
    private static final int IXOFF = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define IXOFF 1024
     * }
     */
    public static int IXOFF() {
        return IXOFF;
    }
    private static final int IXANY = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define IXANY 2048
     * }
     */
    public static int IXANY() {
        return IXANY;
    }
    private static final int IMAXBEL = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define IMAXBEL 8192
     * }
     */
    public static int IMAXBEL() {
        return IMAXBEL;
    }
    private static final int IUTF8 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define IUTF8 16384
     * }
     */
    public static int IUTF8() {
        return IUTF8;
    }
    private static final int OPOST = (int)1L;
    /**
     * {@snippet lang=c :
     * #define OPOST 1
     * }
     */
    public static int OPOST() {
        return OPOST;
    }
    private static final int ONLCR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ONLCR 2
     * }
     */
    public static int ONLCR() {
        return ONLCR;
    }
    private static final int OXTABS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define OXTABS 4
     * }
     */
    public static int OXTABS() {
        return OXTABS;
    }
    private static final int ONOEOT = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ONOEOT 8
     * }
     */
    public static int ONOEOT() {
        return ONOEOT;
    }
    private static final int OCRNL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define OCRNL 16
     * }
     */
    public static int OCRNL() {
        return OCRNL;
    }
    private static final int ONOCR = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ONOCR 32
     * }
     */
    public static int ONOCR() {
        return ONOCR;
    }
    private static final int ONLRET = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ONLRET 64
     * }
     */
    public static int ONLRET() {
        return ONLRET;
    }
    private static final int OFILL = (int)128L;
    /**
     * {@snippet lang=c :
     * #define OFILL 128
     * }
     */
    public static int OFILL() {
        return OFILL;
    }
    private static final int NLDLY = (int)768L;
    /**
     * {@snippet lang=c :
     * #define NLDLY 768
     * }
     */
    public static int NLDLY() {
        return NLDLY;
    }
    private static final int TABDLY = (int)3076L;
    /**
     * {@snippet lang=c :
     * #define TABDLY 3076
     * }
     */
    public static int TABDLY() {
        return TABDLY;
    }
    private static final int CRDLY = (int)12288L;
    /**
     * {@snippet lang=c :
     * #define CRDLY 12288
     * }
     */
    public static int CRDLY() {
        return CRDLY;
    }
    private static final int FFDLY = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FFDLY 16384
     * }
     */
    public static int FFDLY() {
        return FFDLY;
    }
    private static final int BSDLY = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define BSDLY 32768
     * }
     */
    public static int BSDLY() {
        return BSDLY;
    }
    private static final int VTDLY = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define VTDLY 65536
     * }
     */
    public static int VTDLY() {
        return VTDLY;
    }
    private static final int OFDEL = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define OFDEL 131072
     * }
     */
    public static int OFDEL() {
        return OFDEL;
    }
    private static final int NL0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define NL0 0
     * }
     */
    public static int NL0() {
        return NL0;
    }
    private static final int NL1 = (int)256L;
    /**
     * {@snippet lang=c :
     * #define NL1 256
     * }
     */
    public static int NL1() {
        return NL1;
    }
    private static final int NL2 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define NL2 512
     * }
     */
    public static int NL2() {
        return NL2;
    }
    private static final int NL3 = (int)768L;
    /**
     * {@snippet lang=c :
     * #define NL3 768
     * }
     */
    public static int NL3() {
        return NL3;
    }
    private static final int TAB0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TAB0 0
     * }
     */
    public static int TAB0() {
        return TAB0;
    }
    private static final int TAB1 = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define TAB1 1024
     * }
     */
    public static int TAB1() {
        return TAB1;
    }
    private static final int TAB2 = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define TAB2 2048
     * }
     */
    public static int TAB2() {
        return TAB2;
    }
    private static final int TAB3 = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TAB3 4
     * }
     */
    public static int TAB3() {
        return TAB3;
    }
    private static final int CR0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CR0 0
     * }
     */
    public static int CR0() {
        return CR0;
    }
    private static final int CR1 = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define CR1 4096
     * }
     */
    public static int CR1() {
        return CR1;
    }
    private static final int CR2 = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define CR2 8192
     * }
     */
    public static int CR2() {
        return CR2;
    }
    private static final int CR3 = (int)12288L;
    /**
     * {@snippet lang=c :
     * #define CR3 12288
     * }
     */
    public static int CR3() {
        return CR3;
    }
    private static final int FF0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define FF0 0
     * }
     */
    public static int FF0() {
        return FF0;
    }
    private static final int FF1 = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define FF1 16384
     * }
     */
    public static int FF1() {
        return FF1;
    }
    private static final int BS0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define BS0 0
     * }
     */
    public static int BS0() {
        return BS0;
    }
    private static final int BS1 = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define BS1 32768
     * }
     */
    public static int BS1() {
        return BS1;
    }
    private static final int VT0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define VT0 0
     * }
     */
    public static int VT0() {
        return VT0;
    }
    private static final int VT1 = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define VT1 65536
     * }
     */
    public static int VT1() {
        return VT1;
    }
    private static final int CIGNORE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CIGNORE 1
     * }
     */
    public static int CIGNORE() {
        return CIGNORE;
    }
    private static final int CSIZE = (int)768L;
    /**
     * {@snippet lang=c :
     * #define CSIZE 768
     * }
     */
    public static int CSIZE() {
        return CSIZE;
    }
    private static final int CS5 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CS5 0
     * }
     */
    public static int CS5() {
        return CS5;
    }
    private static final int CS6 = (int)256L;
    /**
     * {@snippet lang=c :
     * #define CS6 256
     * }
     */
    public static int CS6() {
        return CS6;
    }
    private static final int CS7 = (int)512L;
    /**
     * {@snippet lang=c :
     * #define CS7 512
     * }
     */
    public static int CS7() {
        return CS7;
    }
    private static final int CS8 = (int)768L;
    /**
     * {@snippet lang=c :
     * #define CS8 768
     * }
     */
    public static int CS8() {
        return CS8;
    }
    private static final int CSTOPB = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define CSTOPB 1024
     * }
     */
    public static int CSTOPB() {
        return CSTOPB;
    }
    private static final int CREAD = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define CREAD 2048
     * }
     */
    public static int CREAD() {
        return CREAD;
    }
    private static final int PARENB = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define PARENB 4096
     * }
     */
    public static int PARENB() {
        return PARENB;
    }
    private static final int PARODD = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define PARODD 8192
     * }
     */
    public static int PARODD() {
        return PARODD;
    }
    private static final int HUPCL = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define HUPCL 16384
     * }
     */
    public static int HUPCL() {
        return HUPCL;
    }
    private static final int CLOCAL = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define CLOCAL 32768
     * }
     */
    public static int CLOCAL() {
        return CLOCAL;
    }
    private static final int CCTS_OFLOW = (int)65536L;
    /**
     * {@snippet lang=c :
     * #define CCTS_OFLOW 65536
     * }
     */
    public static int CCTS_OFLOW() {
        return CCTS_OFLOW;
    }
    private static final int CRTS_IFLOW = (int)131072L;
    /**
     * {@snippet lang=c :
     * #define CRTS_IFLOW 131072
     * }
     */
    public static int CRTS_IFLOW() {
        return CRTS_IFLOW;
    }
    private static final int CDTR_IFLOW = (int)262144L;
    /**
     * {@snippet lang=c :
     * #define CDTR_IFLOW 262144
     * }
     */
    public static int CDTR_IFLOW() {
        return CDTR_IFLOW;
    }
    private static final int CDSR_OFLOW = (int)524288L;
    /**
     * {@snippet lang=c :
     * #define CDSR_OFLOW 524288
     * }
     */
    public static int CDSR_OFLOW() {
        return CDSR_OFLOW;
    }
    private static final int CCAR_OFLOW = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define CCAR_OFLOW 1048576
     * }
     */
    public static int CCAR_OFLOW() {
        return CCAR_OFLOW;
    }
    private static final int MDMBUF = (int)1048576L;
    /**
     * {@snippet lang=c :
     * #define MDMBUF 1048576
     * }
     */
    public static int MDMBUF() {
        return MDMBUF;
    }
    private static final int ECHOKE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define ECHOKE 1
     * }
     */
    public static int ECHOKE() {
        return ECHOKE;
    }
    private static final int ECHOE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define ECHOE 2
     * }
     */
    public static int ECHOE() {
        return ECHOE;
    }
    private static final int ECHOK = (int)4L;
    /**
     * {@snippet lang=c :
     * #define ECHOK 4
     * }
     */
    public static int ECHOK() {
        return ECHOK;
    }
    private static final int ECHO = (int)8L;
    /**
     * {@snippet lang=c :
     * #define ECHO 8
     * }
     */
    public static int ECHO() {
        return ECHO;
    }
    private static final int ECHONL = (int)16L;
    /**
     * {@snippet lang=c :
     * #define ECHONL 16
     * }
     */
    public static int ECHONL() {
        return ECHONL;
    }
    private static final int ECHOPRT = (int)32L;
    /**
     * {@snippet lang=c :
     * #define ECHOPRT 32
     * }
     */
    public static int ECHOPRT() {
        return ECHOPRT;
    }
    private static final int ECHOCTL = (int)64L;
    /**
     * {@snippet lang=c :
     * #define ECHOCTL 64
     * }
     */
    public static int ECHOCTL() {
        return ECHOCTL;
    }
    private static final int ISIG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define ISIG 128
     * }
     */
    public static int ISIG() {
        return ISIG;
    }
    private static final int ICANON = (int)256L;
    /**
     * {@snippet lang=c :
     * #define ICANON 256
     * }
     */
    public static int ICANON() {
        return ICANON;
    }
    private static final int ALTWERASE = (int)512L;
    /**
     * {@snippet lang=c :
     * #define ALTWERASE 512
     * }
     */
    public static int ALTWERASE() {
        return ALTWERASE;
    }
    private static final int IEXTEN = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define IEXTEN 1024
     * }
     */
    public static int IEXTEN() {
        return IEXTEN;
    }
    private static final int EXTPROC = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define EXTPROC 2048
     * }
     */
    public static int EXTPROC() {
        return EXTPROC;
    }
    private static final int TOSTOP = (int)4194304L;
    /**
     * {@snippet lang=c :
     * #define TOSTOP 4194304
     * }
     */
    public static int TOSTOP() {
        return TOSTOP;
    }
    private static final int FLUSHO = (int)8388608L;
    /**
     * {@snippet lang=c :
     * #define FLUSHO 8388608
     * }
     */
    public static int FLUSHO() {
        return FLUSHO;
    }
    private static final int NOKERNINFO = (int)33554432L;
    /**
     * {@snippet lang=c :
     * #define NOKERNINFO 33554432
     * }
     */
    public static int NOKERNINFO() {
        return NOKERNINFO;
    }
    private static final int PENDIN = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define PENDIN 536870912
     * }
     */
    public static int PENDIN() {
        return PENDIN;
    }
    private static final int TCSANOW = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TCSANOW 0
     * }
     */
    public static int TCSANOW() {
        return TCSANOW;
    }
    private static final int TCSADRAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TCSADRAIN 1
     * }
     */
    public static int TCSADRAIN() {
        return TCSADRAIN;
    }
    private static final int TCSAFLUSH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TCSAFLUSH 2
     * }
     */
    public static int TCSAFLUSH() {
        return TCSAFLUSH;
    }
    private static final int TCSASOFT = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TCSASOFT 16
     * }
     */
    public static int TCSASOFT() {
        return TCSASOFT;
    }
    private static final int B0 = (int)0L;
    /**
     * {@snippet lang=c :
     * #define B0 0
     * }
     */
    public static int B0() {
        return B0;
    }
    private static final int B50 = (int)50L;
    /**
     * {@snippet lang=c :
     * #define B50 50
     * }
     */
    public static int B50() {
        return B50;
    }
    private static final int B75 = (int)75L;
    /**
     * {@snippet lang=c :
     * #define B75 75
     * }
     */
    public static int B75() {
        return B75;
    }
    private static final int B110 = (int)110L;
    /**
     * {@snippet lang=c :
     * #define B110 110
     * }
     */
    public static int B110() {
        return B110;
    }
    private static final int B134 = (int)134L;
    /**
     * {@snippet lang=c :
     * #define B134 134
     * }
     */
    public static int B134() {
        return B134;
    }
    private static final int B150 = (int)150L;
    /**
     * {@snippet lang=c :
     * #define B150 150
     * }
     */
    public static int B150() {
        return B150;
    }
    private static final int B200 = (int)200L;
    /**
     * {@snippet lang=c :
     * #define B200 200
     * }
     */
    public static int B200() {
        return B200;
    }
    private static final int B300 = (int)300L;
    /**
     * {@snippet lang=c :
     * #define B300 300
     * }
     */
    public static int B300() {
        return B300;
    }
    private static final int B600 = (int)600L;
    /**
     * {@snippet lang=c :
     * #define B600 600
     * }
     */
    public static int B600() {
        return B600;
    }
    private static final int B1200 = (int)1200L;
    /**
     * {@snippet lang=c :
     * #define B1200 1200
     * }
     */
    public static int B1200() {
        return B1200;
    }
    private static final int B1800 = (int)1800L;
    /**
     * {@snippet lang=c :
     * #define B1800 1800
     * }
     */
    public static int B1800() {
        return B1800;
    }
    private static final int B2400 = (int)2400L;
    /**
     * {@snippet lang=c :
     * #define B2400 2400
     * }
     */
    public static int B2400() {
        return B2400;
    }
    private static final int B4800 = (int)4800L;
    /**
     * {@snippet lang=c :
     * #define B4800 4800
     * }
     */
    public static int B4800() {
        return B4800;
    }
    private static final int B9600 = (int)9600L;
    /**
     * {@snippet lang=c :
     * #define B9600 9600
     * }
     */
    public static int B9600() {
        return B9600;
    }
    private static final int B19200 = (int)19200L;
    /**
     * {@snippet lang=c :
     * #define B19200 19200
     * }
     */
    public static int B19200() {
        return B19200;
    }
    private static final int B38400 = (int)38400L;
    /**
     * {@snippet lang=c :
     * #define B38400 38400
     * }
     */
    public static int B38400() {
        return B38400;
    }
    private static final int B7200 = (int)7200L;
    /**
     * {@snippet lang=c :
     * #define B7200 7200
     * }
     */
    public static int B7200() {
        return B7200;
    }
    private static final int B14400 = (int)14400L;
    /**
     * {@snippet lang=c :
     * #define B14400 14400
     * }
     */
    public static int B14400() {
        return B14400;
    }
    private static final int B28800 = (int)28800L;
    /**
     * {@snippet lang=c :
     * #define B28800 28800
     * }
     */
    public static int B28800() {
        return B28800;
    }
    private static final int B57600 = (int)57600L;
    /**
     * {@snippet lang=c :
     * #define B57600 57600
     * }
     */
    public static int B57600() {
        return B57600;
    }
    private static final int B76800 = (int)76800L;
    /**
     * {@snippet lang=c :
     * #define B76800 76800
     * }
     */
    public static int B76800() {
        return B76800;
    }
    private static final int B115200 = (int)115200L;
    /**
     * {@snippet lang=c :
     * #define B115200 115200
     * }
     */
    public static int B115200() {
        return B115200;
    }
    private static final int B230400 = (int)230400L;
    /**
     * {@snippet lang=c :
     * #define B230400 230400
     * }
     */
    public static int B230400() {
        return B230400;
    }
    private static final int EXTA = (int)19200L;
    /**
     * {@snippet lang=c :
     * #define EXTA 19200
     * }
     */
    public static int EXTA() {
        return EXTA;
    }
    private static final int EXTB = (int)38400L;
    /**
     * {@snippet lang=c :
     * #define EXTB 38400
     * }
     */
    public static int EXTB() {
        return EXTB;
    }
    private static final int TCIFLUSH = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TCIFLUSH 1
     * }
     */
    public static int TCIFLUSH() {
        return TCIFLUSH;
    }
    private static final int TCOFLUSH = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TCOFLUSH 2
     * }
     */
    public static int TCOFLUSH() {
        return TCOFLUSH;
    }
    private static final int TCIOFLUSH = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TCIOFLUSH 3
     * }
     */
    public static int TCIOFLUSH() {
        return TCIOFLUSH;
    }
    private static final int TCOOFF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TCOOFF 1
     * }
     */
    public static int TCOOFF() {
        return TCOOFF;
    }
    private static final int TCOON = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TCOON 2
     * }
     */
    public static int TCOON() {
        return TCOON;
    }
    private static final int TCIOFF = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TCIOFF 3
     * }
     */
    public static int TCIOFF() {
        return TCIOFF;
    }
    private static final int TCION = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TCION 4
     * }
     */
    public static int TCION() {
        return TCION;
    }
    private static final int USE_CLANG_TYPES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return USE_CLANG_TYPES;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int IOCPARM_MASK = (int)8191L;
    /**
     * {@snippet lang=c :
     * #define IOCPARM_MASK 8191
     * }
     */
    public static int IOCPARM_MASK() {
        return IOCPARM_MASK;
    }
    private static final int TIOCM_LE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_LE 1
     * }
     */
    public static int TIOCM_LE() {
        return TIOCM_LE;
    }
    private static final int TIOCM_DTR = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_DTR 2
     * }
     */
    public static int TIOCM_DTR() {
        return TIOCM_DTR;
    }
    private static final int TIOCM_RTS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_RTS 4
     * }
     */
    public static int TIOCM_RTS() {
        return TIOCM_RTS;
    }
    private static final int TIOCM_ST = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_ST 8
     * }
     */
    public static int TIOCM_ST() {
        return TIOCM_ST;
    }
    private static final int TIOCM_SR = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_SR 16
     * }
     */
    public static int TIOCM_SR() {
        return TIOCM_SR;
    }
    private static final int TIOCM_CTS = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_CTS 32
     * }
     */
    public static int TIOCM_CTS() {
        return TIOCM_CTS;
    }
    private static final int TIOCM_CAR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_CAR 64
     * }
     */
    public static int TIOCM_CAR() {
        return TIOCM_CAR;
    }
    private static final int TIOCM_RNG = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_RNG 128
     * }
     */
    public static int TIOCM_RNG() {
        return TIOCM_RNG;
    }
    private static final int TIOCM_DSR = (int)256L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_DSR 256
     * }
     */
    public static int TIOCM_DSR() {
        return TIOCM_DSR;
    }
    private static final int TIOCPKT_DATA = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_DATA 0
     * }
     */
    public static int TIOCPKT_DATA() {
        return TIOCPKT_DATA;
    }
    private static final int TIOCPKT_FLUSHREAD = (int)1L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_FLUSHREAD 1
     * }
     */
    public static int TIOCPKT_FLUSHREAD() {
        return TIOCPKT_FLUSHREAD;
    }
    private static final int TIOCPKT_FLUSHWRITE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_FLUSHWRITE 2
     * }
     */
    public static int TIOCPKT_FLUSHWRITE() {
        return TIOCPKT_FLUSHWRITE;
    }
    private static final int TIOCPKT_STOP = (int)4L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_STOP 4
     * }
     */
    public static int TIOCPKT_STOP() {
        return TIOCPKT_STOP;
    }
    private static final int TIOCPKT_START = (int)8L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_START 8
     * }
     */
    public static int TIOCPKT_START() {
        return TIOCPKT_START;
    }
    private static final int TIOCPKT_NOSTOP = (int)16L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_NOSTOP 16
     * }
     */
    public static int TIOCPKT_NOSTOP() {
        return TIOCPKT_NOSTOP;
    }
    private static final int TIOCPKT_DOSTOP = (int)32L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_DOSTOP 32
     * }
     */
    public static int TIOCPKT_DOSTOP() {
        return TIOCPKT_DOSTOP;
    }
    private static final int TIOCPKT_IOCTL = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT_IOCTL 64
     * }
     */
    public static int TIOCPKT_IOCTL() {
        return TIOCPKT_IOCTL;
    }
    private static final int TTYDISC = (int)0L;
    /**
     * {@snippet lang=c :
     * #define TTYDISC 0
     * }
     */
    public static int TTYDISC() {
        return TTYDISC;
    }
    private static final int TABLDISC = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TABLDISC 3
     * }
     */
    public static int TABLDISC() {
        return TABLDISC;
    }
    private static final int SLIPDISC = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SLIPDISC 4
     * }
     */
    public static int SLIPDISC() {
        return SLIPDISC;
    }
    private static final int PPPDISC = (int)5L;
    /**
     * {@snippet lang=c :
     * #define PPPDISC 5
     * }
     */
    public static int PPPDISC() {
        return PPPDISC;
    }
    private static final int CEOL = (int)255L;
    /**
     * {@snippet lang=c :
     * #define CEOL 255
     * }
     */
    public static int CEOL() {
        return CEOL;
    }
    private static final int CERASE = (int)127L;
    /**
     * {@snippet lang=c :
     * #define CERASE 127
     * }
     */
    public static int CERASE() {
        return CERASE;
    }
    private static final int CMIN = (int)1L;
    /**
     * {@snippet lang=c :
     * #define CMIN 1
     * }
     */
    public static int CMIN() {
        return CMIN;
    }
    private static final int CQUIT = (int)28L;
    /**
     * {@snippet lang=c :
     * #define CQUIT 28
     * }
     */
    public static int CQUIT() {
        return CQUIT;
    }
    private static final int CTIME = (int)0L;
    /**
     * {@snippet lang=c :
     * #define CTIME 0
     * }
     */
    public static int CTIME() {
        return CTIME;
    }
    private static final int _FORTIFY_SOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return _FORTIFY_SOURCE;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long tcflag_t
     * }
     */
    public static final OfLong tcflag_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char cc_t
     * }
     */
    public static final OfByte cc_t = termios_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned long speed_t
     * }
     */
    public static final OfLong speed_t = termios_h.C_LONG;

    private static class cfgetispeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_LONG,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfgetispeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static FunctionDescriptor cfgetispeed$descriptor() {
        return cfgetispeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static MethodHandle cfgetispeed$handle() {
        return cfgetispeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static MemorySegment cfgetispeed$address() {
        return cfgetispeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * speed_t cfgetispeed(const struct termios *)
     * }
     */
    public static long cfgetispeed(MemorySegment x0) {
        var mh$ = cfgetispeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfgetispeed", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfgetospeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_LONG,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfgetospeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * speed_t cfgetospeed(const struct termios *)
     * }
     */
    public static FunctionDescriptor cfgetospeed$descriptor() {
        return cfgetospeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * speed_t cfgetospeed(const struct termios *)
     * }
     */
    public static MethodHandle cfgetospeed$handle() {
        return cfgetospeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * speed_t cfgetospeed(const struct termios *)
     * }
     */
    public static MemorySegment cfgetospeed$address() {
        return cfgetospeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * speed_t cfgetospeed(const struct termios *)
     * }
     */
    public static long cfgetospeed(MemorySegment x0) {
        var mh$ = cfgetospeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfgetospeed", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfsetispeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_POINTER,
            termios_h.C_LONG
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfsetispeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static FunctionDescriptor cfsetispeed$descriptor() {
        return cfsetispeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static MethodHandle cfsetispeed$handle() {
        return cfsetispeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static MemorySegment cfsetispeed$address() {
        return cfsetispeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cfsetispeed(struct termios *, speed_t)
     * }
     */
    public static int cfsetispeed(MemorySegment x0, long x1) {
        var mh$ = cfsetispeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfsetispeed", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfsetospeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_POINTER,
            termios_h.C_LONG
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfsetospeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static FunctionDescriptor cfsetospeed$descriptor() {
        return cfsetospeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static MethodHandle cfsetospeed$handle() {
        return cfsetospeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static MemorySegment cfsetospeed$address() {
        return cfsetospeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cfsetospeed(struct termios *, speed_t)
     * }
     */
    public static int cfsetospeed(MemorySegment x0, long x1) {
        var mh$ = cfsetospeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfsetospeed", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcgetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcgetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static FunctionDescriptor tcgetattr$descriptor() {
        return tcgetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static MethodHandle tcgetattr$handle() {
        return tcgetattr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static MemorySegment tcgetattr$address() {
        return tcgetattr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcgetattr(int, struct termios *)
     * }
     */
    public static int tcgetattr(int x0, MemorySegment x1) {
        var mh$ = tcgetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetattr", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsetattr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcsetattr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static FunctionDescriptor tcsetattr$descriptor() {
        return tcsetattr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static MethodHandle tcsetattr$handle() {
        return tcsetattr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static MemorySegment tcsetattr$address() {
        return tcsetattr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcsetattr(int, int, const struct termios *)
     * }
     */
    public static int tcsetattr(int x0, int x1, MemorySegment x2) {
        var mh$ = tcsetattr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsetattr", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcdrain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcdrain");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static FunctionDescriptor tcdrain$descriptor() {
        return tcdrain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static MethodHandle tcdrain$handle() {
        return tcdrain.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static MemorySegment tcdrain$address() {
        return tcdrain.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcdrain(int)
     * }
     */
    public static int tcdrain(int x0) {
        var mh$ = tcdrain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcdrain", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcflow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_INT
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcflow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcflow(int, int)
     * }
     */
    public static FunctionDescriptor tcflow$descriptor() {
        return tcflow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcflow(int, int)
     * }
     */
    public static MethodHandle tcflow$handle() {
        return tcflow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcflow(int, int)
     * }
     */
    public static MemorySegment tcflow$address() {
        return tcflow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcflow(int, int)
     * }
     */
    public static int tcflow(int x0, int x1) {
        var mh$ = tcflow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcflow", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_INT
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcflush(int, int)
     * }
     */
    public static FunctionDescriptor tcflush$descriptor() {
        return tcflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcflush(int, int)
     * }
     */
    public static MethodHandle tcflush$handle() {
        return tcflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcflush(int, int)
     * }
     */
    public static MemorySegment tcflush$address() {
        return tcflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcflush(int, int)
     * }
     */
    public static int tcflush(int x0, int x1) {
        var mh$ = tcflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcflush", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tcsendbreak {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT,
            termios_h.C_INT
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcsendbreak");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int tcsendbreak(int, int)
     * }
     */
    public static FunctionDescriptor tcsendbreak$descriptor() {
        return tcsendbreak.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int tcsendbreak(int, int)
     * }
     */
    public static MethodHandle tcsendbreak$handle() {
        return tcsendbreak.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int tcsendbreak(int, int)
     * }
     */
    public static MemorySegment tcsendbreak$address() {
        return tcsendbreak.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int tcsendbreak(int, int)
     * }
     */
    public static int tcsendbreak(int x0, int x1) {
        var mh$ = tcsendbreak.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcsendbreak", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfmakeraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            termios_h.C_POINTER
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfmakeraw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void cfmakeraw(struct termios *)
     * }
     */
    public static FunctionDescriptor cfmakeraw$descriptor() {
        return cfmakeraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void cfmakeraw(struct termios *)
     * }
     */
    public static MethodHandle cfmakeraw$handle() {
        return cfmakeraw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void cfmakeraw(struct termios *)
     * }
     */
    public static MemorySegment cfmakeraw$address() {
        return cfmakeraw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void cfmakeraw(struct termios *)
     * }
     */
    public static void cfmakeraw(MemorySegment x0) {
        var mh$ = cfmakeraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfmakeraw", x0);
            }
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cfsetspeed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_POINTER,
            termios_h.C_LONG
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("cfsetspeed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int cfsetspeed(struct termios *, speed_t)
     * }
     */
    public static FunctionDescriptor cfsetspeed$descriptor() {
        return cfsetspeed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int cfsetspeed(struct termios *, speed_t)
     * }
     */
    public static MethodHandle cfsetspeed$handle() {
        return cfsetspeed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int cfsetspeed(struct termios *, speed_t)
     * }
     */
    public static MemorySegment cfsetspeed$address() {
        return cfsetspeed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int cfsetspeed(struct termios *, speed_t)
     * }
     */
    public static int cfsetspeed(MemorySegment x0, long x1) {
        var mh$ = cfsetspeed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cfsetspeed", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = termios_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = termios_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = termios_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = termios_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = termios_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = termios_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = termios_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = termios_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = termios_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_nl_item
     * }
     */
    public static final OfInt __darwin_nl_item = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wctrans_t
     * }
     */
    public static final OfInt __darwin_wctrans_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_wctype_t
     * }
     */
    public static final OfInt __darwin_wctype_t = termios_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_pid_t pid_t
     * }
     */
    public static final OfInt pid_t = termios_h.C_INT;

    private static class tcgetsid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            termios_h.C_INT,
            termios_h.C_INT
        );

        public static final MemorySegment ADDR = termios_h.findOrThrow("tcgetsid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * pid_t tcgetsid(int)
     * }
     */
    public static FunctionDescriptor tcgetsid$descriptor() {
        return tcgetsid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * pid_t tcgetsid(int)
     * }
     */
    public static MethodHandle tcgetsid$handle() {
        return tcgetsid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * pid_t tcgetsid(int)
     * }
     */
    public static MemorySegment tcgetsid$address() {
        return tcgetsid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * pid_t tcgetsid(int)
     * }
     */
    public static int tcgetsid(int x0) {
        var mh$ = tcgetsid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tcgetsid", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        class Holder {
            static final MemorySegment __DARWIN_SUF_EXTSN
                = termios_h.LIBRARY_ARENA.allocateFrom("$DARWIN_EXTSN");
        }
        return Holder.__DARWIN_SUF_EXTSN;
    }
    private static final long __DARWIN_C_ANSI = 4096L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return __DARWIN_C_ANSI;
    }
    private static final long __DARWIN_C_FULL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return __DARWIN_C_FULL;
    }
    private static final long __DARWIN_C_LEVEL = 900000L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return __DARWIN_C_LEVEL;
    }
    private static final byte _POSIX_VDISABLE = (byte)255L;
    /**
     * {@snippet lang=c :
     * #define _POSIX_VDISABLE 255
     * }
     */
    public static byte _POSIX_VDISABLE() {
        return _POSIX_VDISABLE;
    }
    private static final int CRTSCTS = (int)196608L;
    /**
     * {@snippet lang=c :
     * #define CRTSCTS 196608
     * }
     */
    public static int CRTSCTS() {
        return CRTSCTS;
    }
    private static final int NOFLSH = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define NOFLSH 2147483648
     * }
     */
    public static int NOFLSH() {
        return NOFLSH;
    }
    private static final MemorySegment __DARWIN_NULL = MemorySegment.ofAddress(0L);
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL (void*) 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return __DARWIN_NULL;
    }
    private static final int IOCPARM_MAX = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define IOCPARM_MAX 8192
     * }
     */
    public static int IOCPARM_MAX() {
        return IOCPARM_MAX;
    }
    private static final int IOC_VOID = (int)536870912L;
    /**
     * {@snippet lang=c :
     * #define IOC_VOID 536870912
     * }
     */
    public static int IOC_VOID() {
        return IOC_VOID;
    }
    private static final int IOC_OUT = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * #define IOC_OUT 1073741824
     * }
     */
    public static int IOC_OUT() {
        return IOC_OUT;
    }
    private static final int IOC_IN = (int)2147483648L;
    /**
     * {@snippet lang=c :
     * #define IOC_IN 2147483648
     * }
     */
    public static int IOC_IN() {
        return IOC_IN;
    }
    private static final int IOC_INOUT = (int)3221225472L;
    /**
     * {@snippet lang=c :
     * #define IOC_INOUT 3221225472
     * }
     */
    public static int IOC_INOUT() {
        return IOC_INOUT;
    }
    private static final int IOC_DIRMASK = (int)3758096384L;
    /**
     * {@snippet lang=c :
     * #define IOC_DIRMASK 3758096384
     * }
     */
    public static int IOC_DIRMASK() {
        return IOC_DIRMASK;
    }
    private static final long TIOCMODG = 1074033667L;
    /**
     * {@snippet lang=c :
     * #define TIOCMODG 1074033667
     * }
     */
    public static long TIOCMODG() {
        return TIOCMODG;
    }
    private static final long TIOCMODS = 2147775492L;
    /**
     * {@snippet lang=c :
     * #define TIOCMODS 2147775492
     * }
     */
    public static long TIOCMODS() {
        return TIOCMODS;
    }
    private static final int TIOCM_CD = (int)64L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_CD 64
     * }
     */
    public static int TIOCM_CD() {
        return TIOCM_CD;
    }
    private static final int TIOCM_RI = (int)128L;
    /**
     * {@snippet lang=c :
     * #define TIOCM_RI 128
     * }
     */
    public static int TIOCM_RI() {
        return TIOCM_RI;
    }
    private static final int TIOCEXCL = (int)536900621L;
    /**
     * {@snippet lang=c :
     * #define TIOCEXCL 536900621
     * }
     */
    public static int TIOCEXCL() {
        return TIOCEXCL;
    }
    private static final int TIOCNXCL = (int)536900622L;
    /**
     * {@snippet lang=c :
     * #define TIOCNXCL 536900622
     * }
     */
    public static int TIOCNXCL() {
        return TIOCNXCL;
    }
    private static final long TIOCFLUSH = 2147775504L;
    /**
     * {@snippet lang=c :
     * #define TIOCFLUSH 2147775504
     * }
     */
    public static long TIOCFLUSH() {
        return TIOCFLUSH;
    }
    private static final long TIOCGETA = 1078490131L;
    /**
     * {@snippet lang=c :
     * #define TIOCGETA 1078490131
     * }
     */
    public static long TIOCGETA() {
        return TIOCGETA;
    }
    private static final long TIOCSETA = 2152231956L;
    /**
     * {@snippet lang=c :
     * #define TIOCSETA 2152231956
     * }
     */
    public static long TIOCSETA() {
        return TIOCSETA;
    }
    private static final long TIOCSETAW = 2152231957L;
    /**
     * {@snippet lang=c :
     * #define TIOCSETAW 2152231957
     * }
     */
    public static long TIOCSETAW() {
        return TIOCSETAW;
    }
    private static final long TIOCSETAF = 2152231958L;
    /**
     * {@snippet lang=c :
     * #define TIOCSETAF 2152231958
     * }
     */
    public static long TIOCSETAF() {
        return TIOCSETAF;
    }
    private static final long TIOCGETD = 1074033690L;
    /**
     * {@snippet lang=c :
     * #define TIOCGETD 1074033690
     * }
     */
    public static long TIOCGETD() {
        return TIOCGETD;
    }
    private static final long TIOCSETD = 2147775515L;
    /**
     * {@snippet lang=c :
     * #define TIOCSETD 2147775515
     * }
     */
    public static long TIOCSETD() {
        return TIOCSETD;
    }
    private static final int TIOCIXON = (int)536900737L;
    /**
     * {@snippet lang=c :
     * #define TIOCIXON 536900737
     * }
     */
    public static int TIOCIXON() {
        return TIOCIXON;
    }
    private static final int TIOCIXOFF = (int)536900736L;
    /**
     * {@snippet lang=c :
     * #define TIOCIXOFF 536900736
     * }
     */
    public static int TIOCIXOFF() {
        return TIOCIXOFF;
    }
    private static final int TIOCSBRK = (int)536900731L;
    /**
     * {@snippet lang=c :
     * #define TIOCSBRK 536900731
     * }
     */
    public static int TIOCSBRK() {
        return TIOCSBRK;
    }
    private static final int TIOCCBRK = (int)536900730L;
    /**
     * {@snippet lang=c :
     * #define TIOCCBRK 536900730
     * }
     */
    public static int TIOCCBRK() {
        return TIOCCBRK;
    }
    private static final int TIOCSDTR = (int)536900729L;
    /**
     * {@snippet lang=c :
     * #define TIOCSDTR 536900729
     * }
     */
    public static int TIOCSDTR() {
        return TIOCSDTR;
    }
    private static final int TIOCCDTR = (int)536900728L;
    /**
     * {@snippet lang=c :
     * #define TIOCCDTR 536900728
     * }
     */
    public static int TIOCCDTR() {
        return TIOCCDTR;
    }
    private static final long TIOCGPGRP = 1074033783L;
    /**
     * {@snippet lang=c :
     * #define TIOCGPGRP 1074033783
     * }
     */
    public static long TIOCGPGRP() {
        return TIOCGPGRP;
    }
    private static final long TIOCSPGRP = 2147775606L;
    /**
     * {@snippet lang=c :
     * #define TIOCSPGRP 2147775606
     * }
     */
    public static long TIOCSPGRP() {
        return TIOCSPGRP;
    }
    private static final long TIOCOUTQ = 1074033779L;
    /**
     * {@snippet lang=c :
     * #define TIOCOUTQ 1074033779
     * }
     */
    public static long TIOCOUTQ() {
        return TIOCOUTQ;
    }
    private static final long TIOCSTI = 2147578994L;
    /**
     * {@snippet lang=c :
     * #define TIOCSTI 2147578994
     * }
     */
    public static long TIOCSTI() {
        return TIOCSTI;
    }
    private static final int TIOCNOTTY = (int)536900721L;
    /**
     * {@snippet lang=c :
     * #define TIOCNOTTY 536900721
     * }
     */
    public static int TIOCNOTTY() {
        return TIOCNOTTY;
    }
    private static final long TIOCPKT = 2147775600L;
    /**
     * {@snippet lang=c :
     * #define TIOCPKT 2147775600
     * }
     */
    public static long TIOCPKT() {
        return TIOCPKT;
    }
    private static final int TIOCSTOP = (int)536900719L;
    /**
     * {@snippet lang=c :
     * #define TIOCSTOP 536900719
     * }
     */
    public static int TIOCSTOP() {
        return TIOCSTOP;
    }
    private static final int TIOCSTART = (int)536900718L;
    /**
     * {@snippet lang=c :
     * #define TIOCSTART 536900718
     * }
     */
    public static int TIOCSTART() {
        return TIOCSTART;
    }
    private static final long TIOCMSET = 2147775597L;
    /**
     * {@snippet lang=c :
     * #define TIOCMSET 2147775597
     * }
     */
    public static long TIOCMSET() {
        return TIOCMSET;
    }
    private static final long TIOCMBIS = 2147775596L;
    /**
     * {@snippet lang=c :
     * #define TIOCMBIS 2147775596
     * }
     */
    public static long TIOCMBIS() {
        return TIOCMBIS;
    }
    private static final long TIOCMBIC = 2147775595L;
    /**
     * {@snippet lang=c :
     * #define TIOCMBIC 2147775595
     * }
     */
    public static long TIOCMBIC() {
        return TIOCMBIC;
    }
    private static final long TIOCMGET = 1074033770L;
    /**
     * {@snippet lang=c :
     * #define TIOCMGET 1074033770
     * }
     */
    public static long TIOCMGET() {
        return TIOCMGET;
    }
    private static final long TIOCGWINSZ = 1074295912L;
    /**
     * {@snippet lang=c :
     * #define TIOCGWINSZ 1074295912
     * }
     */
    public static long TIOCGWINSZ() {
        return TIOCGWINSZ;
    }
    private static final long TIOCSWINSZ = 2148037735L;
    /**
     * {@snippet lang=c :
     * #define TIOCSWINSZ 2148037735
     * }
     */
    public static long TIOCSWINSZ() {
        return TIOCSWINSZ;
    }
    private static final long TIOCUCNTL = 2147775590L;
    /**
     * {@snippet lang=c :
     * #define TIOCUCNTL 2147775590
     * }
     */
    public static long TIOCUCNTL() {
        return TIOCUCNTL;
    }
    private static final int TIOCSTAT = (int)536900709L;
    /**
     * {@snippet lang=c :
     * #define TIOCSTAT 536900709
     * }
     */
    public static int TIOCSTAT() {
        return TIOCSTAT;
    }
    private static final int TIOCSCONS = (int)536900707L;
    /**
     * {@snippet lang=c :
     * #define TIOCSCONS 536900707
     * }
     */
    public static int TIOCSCONS() {
        return TIOCSCONS;
    }
    private static final long TIOCCONS = 2147775586L;
    /**
     * {@snippet lang=c :
     * #define TIOCCONS 2147775586
     * }
     */
    public static long TIOCCONS() {
        return TIOCCONS;
    }
    private static final int TIOCSCTTY = (int)536900705L;
    /**
     * {@snippet lang=c :
     * #define TIOCSCTTY 536900705
     * }
     */
    public static int TIOCSCTTY() {
        return TIOCSCTTY;
    }
    private static final long TIOCEXT = 2147775584L;
    /**
     * {@snippet lang=c :
     * #define TIOCEXT 2147775584
     * }
     */
    public static long TIOCEXT() {
        return TIOCEXT;
    }
    private static final int TIOCSIG = (int)536900703L;
    /**
     * {@snippet lang=c :
     * #define TIOCSIG 536900703
     * }
     */
    public static int TIOCSIG() {
        return TIOCSIG;
    }
    private static final int TIOCDRAIN = (int)536900702L;
    /**
     * {@snippet lang=c :
     * #define TIOCDRAIN 536900702
     * }
     */
    public static int TIOCDRAIN() {
        return TIOCDRAIN;
    }
    private static final long TIOCMSDTRWAIT = 2147775579L;
    /**
     * {@snippet lang=c :
     * #define TIOCMSDTRWAIT 2147775579
     * }
     */
    public static long TIOCMSDTRWAIT() {
        return TIOCMSDTRWAIT;
    }
    private static final long TIOCMGDTRWAIT = 1074033754L;
    /**
     * {@snippet lang=c :
     * #define TIOCMGDTRWAIT 1074033754
     * }
     */
    public static long TIOCMGDTRWAIT() {
        return TIOCMGDTRWAIT;
    }
    private static final long TIOCSDRAINWAIT = 2147775575L;
    /**
     * {@snippet lang=c :
     * #define TIOCSDRAINWAIT 2147775575
     * }
     */
    public static long TIOCSDRAINWAIT() {
        return TIOCSDRAINWAIT;
    }
    private static final long TIOCGDRAINWAIT = 1074033750L;
    /**
     * {@snippet lang=c :
     * #define TIOCGDRAINWAIT 1074033750
     * }
     */
    public static long TIOCGDRAINWAIT() {
        return TIOCGDRAINWAIT;
    }
    private static final int TIOCDSIMICROCODE = (int)536900693L;
    /**
     * {@snippet lang=c :
     * #define TIOCDSIMICROCODE 536900693
     * }
     */
    public static int TIOCDSIMICROCODE() {
        return TIOCDSIMICROCODE;
    }
    private static final int TIOCPTYGRANT = (int)536900692L;
    /**
     * {@snippet lang=c :
     * #define TIOCPTYGRANT 536900692
     * }
     */
    public static int TIOCPTYGRANT() {
        return TIOCPTYGRANT;
    }
    private static final int TIOCPTYGNAME = (int)1082160211L;
    /**
     * {@snippet lang=c :
     * #define TIOCPTYGNAME 1082160211
     * }
     */
    public static int TIOCPTYGNAME() {
        return TIOCPTYGNAME;
    }
    private static final int TIOCPTYUNLK = (int)536900690L;
    /**
     * {@snippet lang=c :
     * #define TIOCPTYUNLK 536900690
     * }
     */
    public static int TIOCPTYUNLK() {
        return TIOCPTYUNLK;
    }
    private static final int TTYDEF_IFLAG = (int)11010L;
    /**
     * {@snippet lang=c :
     * #define TTYDEF_IFLAG 11010
     * }
     */
    public static int TTYDEF_IFLAG() {
        return TTYDEF_IFLAG;
    }
    private static final int TTYDEF_OFLAG = (int)3L;
    /**
     * {@snippet lang=c :
     * #define TTYDEF_OFLAG 3
     * }
     */
    public static int TTYDEF_OFLAG() {
        return TTYDEF_OFLAG;
    }
    private static final int TTYDEF_LFLAG = (int)1483L;
    /**
     * {@snippet lang=c :
     * #define TTYDEF_LFLAG 1483
     * }
     */
    public static int TTYDEF_LFLAG() {
        return TTYDEF_LFLAG;
    }
    private static final int TTYDEF_CFLAG = (int)19200L;
    /**
     * {@snippet lang=c :
     * #define TTYDEF_CFLAG 19200
     * }
     */
    public static int TTYDEF_CFLAG() {
        return TTYDEF_CFLAG;
    }
    private static final int TTYDEF_SPEED = (int)9600L;
    /**
     * {@snippet lang=c :
     * #define TTYDEF_SPEED 9600
     * }
     */
    public static int TTYDEF_SPEED() {
        return TTYDEF_SPEED;
    }
    private static final int CEOF = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CEOF 4
     * }
     */
    public static int CEOF() {
        return CEOF;
    }
    private static final int CINTR = (int)3L;
    /**
     * {@snippet lang=c :
     * #define CINTR 3
     * }
     */
    public static int CINTR() {
        return CINTR;
    }
    private static final int CSTATUS = (int)20L;
    /**
     * {@snippet lang=c :
     * #define CSTATUS 20
     * }
     */
    public static int CSTATUS() {
        return CSTATUS;
    }
    private static final int CKILL = (int)21L;
    /**
     * {@snippet lang=c :
     * #define CKILL 21
     * }
     */
    public static int CKILL() {
        return CKILL;
    }
    private static final int CSUSP = (int)26L;
    /**
     * {@snippet lang=c :
     * #define CSUSP 26
     * }
     */
    public static int CSUSP() {
        return CSUSP;
    }
    private static final int CDSUSP = (int)25L;
    /**
     * {@snippet lang=c :
     * #define CDSUSP 25
     * }
     */
    public static int CDSUSP() {
        return CDSUSP;
    }
    private static final int CSTART = (int)17L;
    /**
     * {@snippet lang=c :
     * #define CSTART 17
     * }
     */
    public static int CSTART() {
        return CSTART;
    }
    private static final int CSTOP = (int)19L;
    /**
     * {@snippet lang=c :
     * #define CSTOP 19
     * }
     */
    public static int CSTOP() {
        return CSTOP;
    }
    private static final int CLNEXT = (int)22L;
    /**
     * {@snippet lang=c :
     * #define CLNEXT 22
     * }
     */
    public static int CLNEXT() {
        return CLNEXT;
    }
    private static final int CDISCARD = (int)15L;
    /**
     * {@snippet lang=c :
     * #define CDISCARD 15
     * }
     */
    public static int CDISCARD() {
        return CDISCARD;
    }
    private static final int CWERASE = (int)23L;
    /**
     * {@snippet lang=c :
     * #define CWERASE 23
     * }
     */
    public static int CWERASE() {
        return CWERASE;
    }
    private static final int CREPRINT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define CREPRINT 18
     * }
     */
    public static int CREPRINT() {
        return CREPRINT;
    }
    private static final int CEOT = (int)4L;
    /**
     * {@snippet lang=c :
     * #define CEOT 4
     * }
     */
    public static int CEOT() {
        return CEOT;
    }
    private static final int CBRK = (int)255L;
    /**
     * {@snippet lang=c :
     * #define CBRK 255
     * }
     */
    public static int CBRK() {
        return CBRK;
    }
    private static final int CRPRNT = (int)18L;
    /**
     * {@snippet lang=c :
     * #define CRPRNT 18
     * }
     */
    public static int CRPRNT() {
        return CRPRNT;
    }
    private static final int CFLUSH = (int)15L;
    /**
     * {@snippet lang=c :
     * #define CFLUSH 15
     * }
     */
    public static int CFLUSH() {
        return CFLUSH;
    }
    private static final int __DARWIN_WCHAR_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return __DARWIN_WCHAR_MAX;
    }
    private static final int __DARWIN_WCHAR_MIN = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return __DARWIN_WCHAR_MIN;
    }
    private static final int __DARWIN_WEOF = (int)-1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return __DARWIN_WEOF;
    }
}

